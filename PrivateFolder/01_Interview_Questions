1. Difference between method and constructor?
    - Constructor should have class name; method can have any name;
    - Method can return value; Constructor can not;
    - We call method with the method name; But we call constructor with "new" key word;
    - A constructor is used to initialize the variables of a Class; A method is used to define the
                                                                    behavior/functionalities of an object
    - Java compiler provides a default constructor; There is no existence of default method.

2. Stream  = Flowing something;

3. Behavior Parameterization
   - is the ability of a method to receive multiple different behavior as
     its parameter and use them internally to accomplish the task.

4. Why is Java so popular?
 - Open Source
    - It is open source, which implies that it it free to use, Any developer with a working knowledge
      of Java can use this free platform to create apps.
 - Built in security
    - It includes high level concurrency tools and packages also take care of security.
 - Strong Community
    - The main reason for Java's popularity is its active and supportive community.
      So, if we ever get trapped in programming, other programmers or the Java community can
      help assist us and solve a problem.
 - Excellent Documentation
    - Its documentation is well-defined and provides complete guide to help and solve any problems.
 - Powerful set of Programming Tools
    - IDE (Integrated Development Environment) is one of Java's most important feature.
      The Java IDE provides a comprehensive editors, debuggers, and collection of automation tools;
    - The three most popular Java IDEs are Eclipse, IntelliJ IDEA, and NetBeans
    - In terms of tools, Java provides Maven for developing Java applications.
    - JConsole and Visual VM work for monitoring Heap utilization
    - Jenkins use for Continuous Integration and Delivery in Java.

5. What are different kind of variables defined in Java?
    - Variable is a container to store a data value. In other words a variable
      is a memory location name for any data.
    - There are 4 kind of variables in Java:
          = Local Variable
                   = Local variables are declared in a blocks, methods, or constructors.
                   = Local variables are created when the block, method, or constructors is started and will be
                     destroyed once it exits the block, method or constructor.
          = Class (Static) Variable
                   = It is declared with the "static" keyword in a class.
                   = A single copy of each static variable is shared by all instances of the class.
                   = Static variables are stored in static memory.
                   = Default values of Static variables:
                             = 0 for numbers;
                             = false/true for boolean;
                             = null for object;
                   = Static variables can be accessed by calling with the class name;
                   = Static variables are initialized only one time.
                   = This variables will be initialized first, before the initialization of any instance variables.
          = Instance Variable
                   = Instance variable are declared outside a method. They are declared in a class.
                   = When object is created the instance variables are created and when object destroyed
                     instance variable is also destroyed.
                   = For instance variables access modifiers can be given.
                   = Instance variables are visible for all methods, constructors, and blocks in the class.
                   = Default values of Instance variables:
                            = 0 for numbers;
                            = false/true for boolean;
                            = null for object;
          = (and Parameter can be also treated as local variable);

6. What is class?
    - A class is a Template, blueprint of an object. A class defines the state and
       behavior that an object can exhibit.

6. What is object?
    - Object is state, behavior of class;
    - Objects are the instance variables of class.
    - Objects are stored through references.
    - Objects are created with new key word.
    - Every object has its own memory.


7. What is state and behavior of an object?
   - Each object has state, behavior and identity.
   - State of an object is stored in field (variables), while methods (functions) display the object's behavior.
   - e.g Cat's state includes its color, size, gender, age, while its behavior is sleeping, purring, meowing for food.
   - The identity is a characteristic used to uniquely identify that object
            = such a random ID number, or an address in memory, ID etc.

8. What is OOP (Object Oriented Programming)?
   - OOP is methodology or paradigm to design a program using classes and objects.
   - OOP is a way of writing computer programs using "objects" to stand for data and methods.

9. What are the key principles of OOP?
    - Inheritance
    - Encapsulation
    - Polymorphism
    - Abstraction

10. What do JVM, JRE and JDK stand for?
11. How do you swap two numbers?
12. Difference Between Array and ArrayList?
13. What is String in Java?
14. Could you explain static vs non-static in Java?
15. Could you explain method overloading?
16. Could you explain method overriding?
17. What are difference between method overloading and overriding?
18. What is primitive type casting?
19. WildCard?
20. Anonymous class = Without providing class type giving a implementation;

21. what is the difference between flatMap() vs map()?
    - map () takes Stream <T> as input and returns Stream <R>;
    - map () is mapper function produces single values for each input value.
      It is called One-To-One mapping. In one data it will do one action and return that data, one by one.
      e.g Stream.of (1, 2, 3, 4) returns [1, 2, 3, 4]

    -flatMap() takes Stream<Stream<T>> (takes Stream of Stream) as an input and return Stream <R>.
     It is called One-To-Many mapping
     e.g [[1, 2],[3,4,] [4,5],[6,7], [8,9]] returns [1,2, 3, 4, 5, 6, 7, 8, 9] flatMap()
22. What is double column operator?
    - We use double column operator when we call method() directly.
    -e.g System.out::println

23. What is the different findAny() and findFirst() (Stream methods)?
    - findFirst() method always gives you first matching one. It will be always same despite the fact how many times we run program.
    - findAny () method gives you any random matching one. It might change each time we run program.
24. What can be the difference between takeWhile() and limit() methods?
    - takeWhile() method limiting based on the condition (Predicate; eg. less then 500, less then 200 etc);
    - limit() does not accept condition and only limits based on the value (eg. limit 1, limit 2);
25. What is the difference between dropWhile() and takeWhile()?
    - dropWhile() skipping based on the condition(); skip() method skips based on the value you provide(e.g skip 1, skip 2)

26. What is Encapsulation?
    - Encapsulation, along with abstraction, polymorphism and inheritance, is one of the four key concepts in
      object oriented programming (OOP).Encapsulation is data hiding. We use private access modifier to protect data from
      accessing and from modification without permission. To access encapsulated data we use getter() and setter() methods;
    - We can set restrictions using setter method

27. What is inheritance?
    inheritance, along with encapsulation, abstraction and polymorphism is one of the four key concepts in
    object oriented programming. Inheritance is Is A relationship between classes. We have parent/child classes;
    We use "extend" keyWord to inherit one class to another; Extended class is super class.

28. What are inheritance types?
    - MultiLevel Inheritance = Parent -> child -> grandChild
    - Hierarchical Inheritance =  Parent -> child - > child
    - Single Inheritance = Parent -> child;

29. Why do we use inheritance?
    - The most important use of inheritance in Java is code re-usability.
      The code that is present in the parent class can be directly used
      by the child class. Method overriding is also known as runtime polymorphism.

30. What is abstraction?
    - Abstraction is one of the key concept of OPP.
      It is process of hiding implementation details from the user; Only the functionality is provided;
      User will have information what the object does, instead of how it does.
31. What is abstract class?
    - Abstract class meant to be a parent class. Goal is to provide reusable variables and methods
    - Abstract keyword is used to create abstract class
    - An abstract class can not be instantiated;
    - We can not call any methods from abstract class;
    - We can not create object of abstract class;
32. What are the differences between Abstract Classes and Interface?
        = Interface - Can only have final static variables. Interface can never change its own state;
        = Abstract class - can have any static or instance variables, mutable or immutable;
        = A class can implement multiple interfaces;
        = A class can extend only one abstract class
        = Interface Can be implemented with the implements keyword. An interface can also extend interfaces.
        = Abstract class Can only be extended.
        = Only functional interfaces can use the lambda feature in Java.
        = Abstract classes with only one abstract method cannot use lambdas.
        = Interface Can't have constructor.
        = Abstract class can have constructor;
        = Interface can have abstract methods, default and static methods and private methods introduced in java 9;
        = Abstract class can have any kind of methods;

33. What is Polymorphism?
       = Polymorphism is one of the key concept of OOP.
       = The word polymorphism means having many forms, and occurs when we have many classes that are related to each other by inheritance.
         inheritance allows us to inherit attributes and methods from another class.  Polymorphism uses those methods to perform different tasks.
       = A real- life example of polymorphism is a person who at the same time can have different characteristics.

34. What are the types of Polymorphism?
      = There are two main types of polymorphism i.e. runtime polymorphism and compile-time polymorphism.
        Runtime polymorphism is achieved through method overriding, and
        compile-time polymorphism is achieved through method overloading.

35. Give a real world example?
      = A real-life example of polymorphism is a person who at the same time can have different characteristics.
        A man at the same time is a father, a husband, and an employee. So the same
        person exhibits different behavior in different situations.

36. Why and when do we need Polymorphism?
      = Code reuse = it enables you to write more flexible and reusable code by allowing you to treat
        objects of different types as if they were the same type.
      = Method overriding: Polymorphism allows us to override methods in a superclass, providing a specific implementation in a subclass;
      = Interface implementation:  it allows us to define an interface and implement it in multiple classes.
      = Flexibility = Flexible code by separating the interface of an object from its implementation.
37. Procedural programming?
      = Procedural programming is about writing procedures or methods that perform operations on the data.
        it is linear and executes from top to bottom.

38. Benefits of OOP over Procedural Programming?
      = Modularity or re-usability: OOP allows you to modularize your code by encapsulating related data and behavior into objects;
      = Abstraction: OOP allows you to create abstract data types that hide their implementation details.
      = Inheritance and polymorphism: OOP provides inheritance, which allows you to create new classes that are based
        on existing classes and polymorphism, which allows you to treat object of different classes as if they are the same type.
      = Encapsulation: OOP promotes encapsulation, which means that the internal workings are hidden from the outside world. This
        provides better security and reducing the complexity of your code.
      = Code organization: OOP provides a way to organize your code into logical, self contained units, making it easier to manage and understand.

39. Disadvantage of OOP?
      = Complexity: OOP can be complex to read and understand for the developers;
      = It might be overhead in general, that means to be a negative factor in programming as it can lead to slower performance, increased
        memory usage and other issues, that can make a program less efficient of effective.

40. There are 2 type of casting in Polymorphism:
     = Down Casting which means to cast larger reference type to smaller reference type  = that done explicitly;
     = Up Casting which means to smaller reference type to larger reference type = that is done implicitly;
     = There must me Is A relationship between the object type and reference type to be casted.

41. Use of "super" and "this" Key Words?
     = They are special keywords that are used to refer to different objects or methods within a class hierarchy.
     = "Super" is used to refer superclass of the current class. 'Super' keyword is used to call a constructor or method of the superclass from a subclass.
     = "this" is used to refer to a current object instance of a class. Also it calls the methods or constructors within the same class.
     = Overall they are both important keywords in Java that help to manage class hierarchy and distinguish between class-level and
       instance-level variables and methods.

42. What are Solid Principles of OOP?
    = Single Responsibility Principal - You should make sure that functionality are seperated, not good to put everything in one class;
    = The Open-Closed Principle - Class/Module should be open for extension, but closed for modification. That means, you should add
                                  some functionality instead of making changes to the existing one; calculator example, better to create
                                  separate class for each operator, rather than put everything in one class.
    = The Liskov Substitution Principle
              - In simpler terms, this means that any method or property that works on the superclass should also work on
                its subclasses, without any unexpected behavior or errors.
    = The interface Segregation Principle
              - A client should not be forced to implement an interface or it should not depend on a method it does not use;
              - Better to separate methods and create different interfaces;
    = The Dependency Inversion Principle
            - Your code should be Loosely Coupled, not Title Coupled;
            - Instead of creating direct connection between one class to another, better to create something in between.

43. What is the superclass of every class in Java?
    = the superclass of every class is the Object class. The Object class is the root of the class hierarchy, and provides a set of
      common methods that are inherited by all other classes in Java. Some of the common methods provided by the Object class include:

      equals(Object obj) : Compares the object for equality with the given object
      toString() : Returns a string representation of the object
      hashCode() : Returns a hash code value for the object
      getClass() : Returns the class object for the object

44.What is Object class in Java programming language?
    =the Object class is the root of the class hierarchy. It is a built-in class provided by the Java platform, and is located in the java.lang package.

45. Do you remember some of the non-static methods in Object Class?
     = equals(Object obj): This method is used to compare two objects for equality. It returns true if the objects are equal; otherwise, it returns false.
     = hashCode(): This method returns a hash code value for the object. This value is used by hash-based data structures, such as hash maps and hash sets,
       to store and retrieve objects.
     = toString(): This method returns a string representation of the object. The string representation can be used for debugging or logging purposes.

46. Explain the toString() method?
     = it returns string representation. e.g. Person class, we declared person name and age, we should override toString () method, in order to be able to print
        this object in another class we create.
47. What is the use of equals method in Java? How to override it?
     = equals method compares two object to each other, if they are the same or not. e.g person class, declared person name and age. By overriding
        equals method we can compare persons to each other by name and age and we can say if they are the same or not.

        public class Person {
            private String name;
            private int age;

            public Person(String name, int age) {
                this.name = name;
                this.age = age;
            }

            @Override
            public boolean equals(Object obj) {
                if (obj == this) {
                    return true;
                }

                if (!(obj instanceof Person)) {
                    return false;
                }

                Person other = (Person) obj;
                return this.name.equals(other.name) && this.age == other.age;
            }
48. What is the difference between == and equals ()?
   - == operator compares if the objects are same in the memory, if yes true, if not false;
   - equals() method compared content and not the location. if the content is same, returns true, if not, returns false.
   String s1 = "hello";
   String s2 = "hello";
   String s3 = new String("hello");

   System.out.println(s1 == s2); // true
   System.out.println(s1 == s3); // false
   System.out.println(s1.equals(s3)); // true

49. Why do we need Wrapper Classes?
    = Wrapper classes in java provide a way to represent primitive data types as objects. The main reasons for using wrapper classes are:
      1. To treat primitive types as objects: Java is an object-oriented language, and some APIs require objects to be passed as parameters.
      2.To provide utility methods: Wrapper classes provide many useful methods for working with primitive types that are not
        available on the primitive types themselves. For example, the Integer class provides methods to
        convert a string to an integer, or to format an integer as a string.
      3.To provide null values: Primitive types cannot be set to null, whereas objects can. By using wrapper classes,
        we can create nullable objects that can be set to null when no value is present.
      4.To use in collections: Collections in Java can only hold objects, not primitive types.

50. How do you convert a String to Integer?
    = We can use valueOf () method or parse () method.
    Code Example:

        String str = "1234";
        Integer num = Integer.parseInt(str);
        Integer num2 = Integer.valueOf(str);

